CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 264106564 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/06_OneConvRegrMultiNode/../../../../../../Examples/Image/GettingStarted/06_OneConvRegrMultiNode.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST RunDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/06_OneConvRegrMultiNode/../../../../../../Examples/Image/GettingStarted OutputDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=true stderr=- trainNetwork=[SGD=[maxEpochs=3]]
CNTK 2.1+ (HEAD 572609, Aug 21 2017 08:22:49) on ad5c3ab446a4 at 2017/08/21 08:54:29

/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/06_OneConvRegrMultiNode/../../../../../../Examples/Image/GettingStarted/06_OneConvRegrMultiNode.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST  RunDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/06_OneConvRegrMultiNode/../../../../../../Examples/Image/GettingStarted  OutputDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=true  stderr=-  trainNetwork=[SGD=[maxEpochs=3]]
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST
08/21/2017 08:54:29: Redirecting stderr to file -_trainNetwork_testNetwork.log
08/21/2017 08:54:29: -------------------------------------------------------------------
08/21/2017 08:54:29: Build info: 

08/21/2017 08:54:29: 		Built time: Aug 21 2017 08:20:29
08/21/2017 08:54:29: 		Last modified date: Thu Aug  3 09:47:36 2017
08/21/2017 08:54:29: 		Build type: release
08/21/2017 08:54:29: 		Build target: GPU
08/21/2017 08:54:29: 		With 1bit-SGD: no
08/21/2017 08:54:29: 		With ASGD: yes
08/21/2017 08:54:29: 		Math lib: mkl
08/21/2017 08:54:29: 		CUDA_PATH: /usr/local/cuda-8.0
08/21/2017 08:54:29: 		CUB_PATH: /usr/local/cub-1.4.1
08/21/2017 08:54:29: 		CUDNN_PATH: /usr/local/cudnn-6.0
08/21/2017 08:54:29: 		Build Branch: HEAD
08/21/2017 08:54:29: 		Build SHA1: 57260963c605c12d3796e37783433518ab8ba039
08/21/2017 08:54:29: 		Built by Source/CNTK/buildinfo.h$$0 on 516c40771854
08/21/2017 08:54:29: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/21/2017 08:54:29: 		MPI distribution: Open MPI
08/21/2017 08:54:29: 		MPI version: 1.10.7
08/21/2017 08:54:29: -------------------------------------------------------------------
08/21/2017 08:54:29: -------------------------------------------------------------------
08/21/2017 08:54:29: GPU info:

08/21/2017 08:54:29: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; total memory = 3020 MB; free memory = 3018 MB
08/21/2017 08:54:29: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 06_OneConvRegrMultiNode.cntk:command=trainNetwork:testNetwork
configparameters: 06_OneConvRegrMultiNode.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/06_OneConvRegrMultiNode/../../../../../../Examples/Image/GettingStarted
configparameters: 06_OneConvRegrMultiNode.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST
configparameters: 06_OneConvRegrMultiNode.cntk:dataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST
configparameters: 06_OneConvRegrMultiNode.cntk:deviceId=0
configparameters: 06_OneConvRegrMultiNode.cntk:forceDeterministicAlgorithms=true
configparameters: 06_OneConvRegrMultiNode.cntk:modelPath=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu/Models/06_OneConvRegrMultiNode
configparameters: 06_OneConvRegrMultiNode.cntk:outputDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu
configparameters: 06_OneConvRegrMultiNode.cntk:parallelizationMethod=DataParallelSGD
configparameters: 06_OneConvRegrMultiNode.cntk:precision=float
configparameters: 06_OneConvRegrMultiNode.cntk:rootDir=..
configparameters: 06_OneConvRegrMultiNode.cntk:RunDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu
configparameters: 06_OneConvRegrMultiNode.cntk:stderr=-
configparameters: 06_OneConvRegrMultiNode.cntk:testNetwork={
    action = "test"
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 06_OneConvRegrMultiNode.cntk:timestamping=true
configparameters: 06_OneConvRegrMultiNode.cntk:traceLevel=1
configparameters: 06_OneConvRegrMultiNode.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
labelDim = 10                               
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        model = Sequential (
            Scale {featScale} :
            ConvolutionalLayer {16, (5:5), pad = true} : ReLU : 
            MaxPoolingLayer    {(2:2), stride=(2:2)} :
            DenseLayer {64} : ReLU : 
            LinearLayer {labelDim}
        )
        features = Input {imageShape}
        labels = Input {labelDim}
        z = model (features)
        diff = labels - z
        sqerr = ReduceSum (diff.*diff, axis=1)
        rmse =  Sqrt (sqerr / labelDim)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (rmse)
        evaluationNodes = (rmse)
        outputNodes     = (z)
    }
    SGD = {
        epochSize = 0
        minibatchSize = 64
        maxEpochs = 15
        learningRatesPerSample = 0.001*5:0.0005
        momentumAsTimeConstant = 1024
        numMBsToShowResult = 500
        ParallelTrain = [
            parallelizationMethod = DataParallelSGD
            distributedMBReading = "true"
            parallelizationStartEpoch = 1
            DataParallelSGD = [
                gradientBits = 32
            ]
            ModelAveragingSGD = [
                blockSizePerWorker = 64
            ]
            DataParallelASGD = [
                syncPeriod = 64
                usePipeline = false
            ]
        ]
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST/Train-28x28_cntk_text.txt"
        input = {
            features   = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }   
} [SGD=[maxEpochs=3]]

08/21/2017 08:54:29: Commands: trainNetwork testNetwork
08/21/2017 08:54:29: precision = "float"
08/21/2017 08:54:29: WARNING: forceDeterministicAlgorithms flag is specified. Using 1 CPU thread for processing.

08/21/2017 08:54:29: ##############################################################################
08/21/2017 08:54:29: #                                                                            #
08/21/2017 08:54:29: # trainNetwork command (train action)                                        #
08/21/2017 08:54:29: #                                                                            #
08/21/2017 08:54:29: ##############################################################################

parallelTrain option is not enabled. ParallelTrain config will be ignored.
08/21/2017 08:54:29: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[64 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 16] as glorotUniform later when dimensions are fully known.

Post-processing network...

2 roots:
	rmse = Sqrt()
	z = Plus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 0]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 0 x 16]
Validating --> z.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> z.x._.x.x._.x = ElementTimes (z.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 1 x 16].
Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 1 x 16] <- glorotUniform(seed=3, init dims=[400 x 25], range=0.118818(0.118818*1.000000), onCPU=true.
)Validating --> z.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, z.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> z.x._.x.x._.res.x = Plus (z.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *], [1 x 1 x 16] -> [28 x 28 x 16 x *]
Validating --> z.x._.x.x = RectifiedLinear (z.x._.x.x._.res.x) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> _z.x._.x = Pooling (z.x._.x.x) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 14 x 14 x 16].
Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[64 x 14 x 14 x 16] <- glorotUniform(seed=2, init dims=[64 x 3136], range=0.043301(0.043301*1.000000), onCPU=true.
)Validating --> z.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[4].arrayOfFunctions[0].W, _z.x._.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *] -> [64 x *]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> z.x._.x = Plus (z.x._.x.PlusArgs[0], model.arrayOfFunctions[4].arrayOfFunctions[0].b) : [64 x *], [64] -> [64 x *]
Validating --> z.x = RectifiedLinear (z.x._.x) : [64 x *] -> [64 x *]
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 64].
Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- glorotUniform(seed=1, init dims=[10 x 64], range=0.284747(0.284747*1.000000), onCPU=true.
)Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[6].W, z.x) : [10 x 64], [64 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [10]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[6].b) : [10 x *], [10] -> [10 x *]
Validating --> diff = Minus (labels, z) : [10 x *], [10 x *] -> [10 x *]
Validating --> sqerr._ = ElementTimes (diff, diff) : [10 x *], [10 x *] -> [10 x *]
Validating --> sqerr = ReduceElements (sqerr._) : [10 x *] -> [1 x *]
Validating --> _rmse.z = LearnableParameter() :  -> [1]
Validating --> rmse.z = ElementTimes (sqerr, _rmse.z) : [1 x *], [1] -> [1 x *]
Validating --> rmse = Sqrt (rmse.z) : [1 x *] -> [1 x *]

Validating network. 15 nodes to process in pass 2.


Validating network, final pass.

z.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_z.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

08/21/2017 08:54:30: 
Model has 25 nodes. Using GPU 0.

08/21/2017 08:54:30: Training criterion:   rmse = Sqrt


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 8 are aliased.
	z.x._.x.x._.c (gradient) reuses z.x._.x.x._.res.x (gradient)
	z.PlusArgs[0] (gradient) reuses z (gradient)
	z.x._.x.PlusArgs[0] (gradient) reuses z.x._.x (gradient)
	labels (gradient) reuses diff (gradient)

Memory Sharing: Out of 45 matrices, 31 are shared as 8, and 14 are not shared.

Here are the ones that share memory:
	{ diff : [10 x *]
	  model.arrayOfFunctions[6].W : [10 x 64] (gradient) }
	{ model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16] (gradient)
	  z.x._.x.x : [28 x 28 x 16 x *]
	  z.x._.x.x._.c : [28 x 28 x 16 x *] }
	{ _z.x._.x : [14 x 14 x 16 x *] (gradient)
	  z.x : [64 x *]
	  z.x._.x.PlusArgs[0] : [64 x *] }
	{ _z.x._.x : [14 x 14 x 16 x *]
	  z.x._.x.x._.c : [28 x 28 x 16 x *] (gradient)
	  z.x._.x.x._.res.x : [28 x 28 x 16 x *]
	  z.x._.x.x._.res.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64] (gradient)
	  sqerr : [1 x *] }
	{ model.arrayOfFunctions[1].b : [1 x 1 x 16] (gradient)
	  sqerr : [1 x *] (gradient)
	  z : [10 x *]
	  z : [10 x *] (gradient)
	  z.PlusArgs[0] : [10 x *] (gradient)
	  z.x._.x : [64 x *]
	  z.x._.x : [64 x *] (gradient)
	  z.x._.x.PlusArgs[0] : [64 x *] (gradient)
	  z.x._.x.x : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16] (gradient)
	  rmse.z : [1 x *] (gradient)
	  sqerr._ : [10 x *]
	  sqerr._ : [10 x *] (gradient)
	  z.PlusArgs[0] : [10 x *]
	  z.x : [64 x *] (gradient) }
	{ rmse : [1 x *] (gradient)
	  rmse.z : [1 x *] }

Here are the ones that don't share memory:
	{z.x._.x.x._.x : [28 x 28 x 1 x *]}
	{model.arrayOfFunctions[6].b : [10] (gradient)}
	{diff : [10 x *] (gradient)}
	{rmse : [1 x *]}
	{model.arrayOfFunctions[6].W : [10 x 64]}
	{model.arrayOfFunctions[6].b : [10]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64]}
	{_rmse.z : [1]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16]}
	{model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16]}
	{features : [28 x 28 x 1 x *]}
	{z.x._.x.x._.x.ElementTimesArgs[0] : [1 x 1]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 16]}
	{labels : [10 x *]}


08/21/2017 08:54:30: Training 201834 parameters in 6 out of 6 parameter tensors and 20 nodes with gradient:

08/21/2017 08:54:30: 	Node 'model.arrayOfFunctions[1].W' (LearnableParameter operation) : [5 x 5 x 1 x 16]
08/21/2017 08:54:30: 	Node 'model.arrayOfFunctions[1].b' (LearnableParameter operation) : [1 x 1 x 16]
08/21/2017 08:54:30: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].W' (LearnableParameter operation) : [64 x 14 x 14 x 16]
08/21/2017 08:54:30: 	Node 'model.arrayOfFunctions[4].arrayOfFunctions[0].b' (LearnableParameter operation) : [64]
08/21/2017 08:54:30: 	Node 'model.arrayOfFunctions[6].W' (LearnableParameter operation) : [10 x 64]
08/21/2017 08:54:30: 	Node 'model.arrayOfFunctions[6].b' (LearnableParameter operation) : [10]

08/21/2017 08:54:30: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/21/2017 08:54:30: Starting Epoch 1: learning rate per sample = 0.001  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

08/21/2017 08:54:30: Starting minibatch loop.
08/21/2017 08:54:33:  Epoch[ 1 of 3]-Minibatch[   1- 500]: rmse = 0.19081726 * 32000; time = 3.3540s; samplesPerSecond = 9540.7
08/21/2017 08:54:34: Finished Epoch[ 1 of 3]: [Training] rmse = 0.16214149 * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.001; epochTime=4.41244s
08/21/2017 08:54:34: SGD: Saving checkpoint model '/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu/Models/06_OneConvRegrMultiNode.1'

08/21/2017 08:54:34: Starting Epoch 2: learning rate per sample = 0.001  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

08/21/2017 08:54:34: Starting minibatch loop.
08/21/2017 08:54:36:  Epoch[ 2 of 3]-Minibatch[   1- 500, 100.00%]: rmse = 0.10944039 * 32000; time = 1.2031s; samplesPerSecond = 26599.0
08/21/2017 08:54:37: Finished Epoch[ 2 of 3]: [Training] rmse = 0.10432612 * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.001; epochTime=2.2627s
08/21/2017 08:54:37: SGD: Saving checkpoint model '/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu/Models/06_OneConvRegrMultiNode.2'

08/21/2017 08:54:37: Starting Epoch 3: learning rate per sample = 0.001  effective momentum = 0.939413  momentum as time constant = 1024.0 samples

08/21/2017 08:54:37: Starting minibatch loop.
08/21/2017 08:54:38:  Epoch[ 3 of 3]-Minibatch[   1- 500, 100.00%]: rmse = 0.09035979 * 32000; time = 1.2011s; samplesPerSecond = 26642.8
08/21/2017 08:54:39: Finished Epoch[ 3 of 3]: [Training] rmse = 0.08720698 * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.001; epochTime=2.267s
08/21/2017 08:54:39: SGD: Saving checkpoint model '/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_06_OneConvRegrMultiNode@release_gpu/Models/06_OneConvRegrMultiNode'

08/21/2017 08:54:39: Action "train" complete.


08/21/2017 08:54:39: ##############################################################################
08/21/2017 08:54:39: #                                                                            #
08/21/2017 08:54:39: # testNetwork command (test action)                                          #
08/21/2017 08:54:39: #                                                                            #
08/21/2017 08:54:39: ##############################################################################


Post-processing network...

2 roots:
	rmse = Sqrt()
	z = Plus()

Validating network. 25 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> model.arrayOfFunctions[6].W = LearnableParameter() :  -> [10 x 64]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 14 x 14 x 16]
Validating --> model.arrayOfFunctions[1].W = LearnableParameter() :  -> [5 x 5 x 1 x 16]
Validating --> z.x._.x.x._.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> z.x._.x.x._.x = ElementTimes (z.x._.x.x._.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> z.x._.x.x._.c = Convolution (model.arrayOfFunctions[1].W, z.x._.x.x._.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> model.arrayOfFunctions[1].b = LearnableParameter() :  -> [1 x 1 x 16]
Validating --> z.x._.x.x._.res.x = Plus (z.x._.x.x._.c, model.arrayOfFunctions[1].b) : [28 x 28 x 16 x *1], [1 x 1 x 16] -> [28 x 28 x 16 x *1]
Validating --> z.x._.x.x = RectifiedLinear (z.x._.x.x._.res.x) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> _z.x._.x = Pooling (z.x._.x.x) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> z.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[4].arrayOfFunctions[0].W, _z.x._.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *1] -> [64 x *1]
Validating --> model.arrayOfFunctions[4].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> z.x._.x = Plus (z.x._.x.PlusArgs[0], model.arrayOfFunctions[4].arrayOfFunctions[0].b) : [64 x *1], [64] -> [64 x *1]
Validating --> z.x = RectifiedLinear (z.x._.x) : [64 x *1] -> [64 x *1]
Validating --> z.PlusArgs[0] = Times (model.arrayOfFunctions[6].W, z.x) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> model.arrayOfFunctions[6].b = LearnableParameter() :  -> [10]
Validating --> z = Plus (z.PlusArgs[0], model.arrayOfFunctions[6].b) : [10 x *1], [10] -> [10 x *1]
Validating --> diff = Minus (labels, z) : [10 x *1], [10 x *1] -> [10 x *1]
Validating --> sqerr._ = ElementTimes (diff, diff) : [10 x *1], [10 x *1] -> [10 x *1]
Validating --> sqerr = ReduceElements (sqerr._) : [10 x *1] -> [1 x *1]
Validating --> _rmse.z = LearnableParameter() :  -> [1]
Validating --> rmse.z = ElementTimes (sqerr, _rmse.z) : [1 x *1], [1] -> [1 x *1]
Validating --> rmse = Sqrt (rmse.z) : [1 x *1] -> [1 x *1]

Validating network. 15 nodes to process in pass 2.


Validating network, final pass.

z.x._.x.x._.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
_z.x._.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.



Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 25 matrices, 14 are shared as 3, and 11 are not shared.

Here are the ones that share memory:
	{ diff : [10 x *1]
	  sqerr : [1 x *1]
	  z.PlusArgs[0] : [10 x *1]
	  z.x._.x.PlusArgs[0] : [64 x *1] }
	{ z.x._.x : [64 x *1]
	  z.x._.x.x : [28 x 28 x 16 x *1]
	  z.x._.x.x._.c : [28 x 28 x 16 x *1] }
	{ _z.x._.x : [14 x 14 x 16 x *1]
	  rmse.z : [1 x *1]
	  sqerr._ : [10 x *1]
	  z : [10 x *1]
	  z.x : [64 x *1]
	  z.x._.x.x._.res.x : [28 x 28 x 16 x *1]
	  z.x._.x.x._.x : [28 x 28 x 1 x *1] }

Here are the ones that don't share memory:
	{rmse : [1 x *1]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].W : [64 x 14 x 14 x 16]}
	{model.arrayOfFunctions[6].W : [10 x 64]}
	{model.arrayOfFunctions[4].arrayOfFunctions[0].b : [64]}
	{model.arrayOfFunctions[6].b : [10]}
	{model.arrayOfFunctions[1].W : [5 x 5 x 1 x 16]}
	{features : [28 x 28 x 1 x *1]}
	{model.arrayOfFunctions[1].b : [1 x 1 x 16]}
	{labels : [10 x *1]}
	{_rmse.z : [1]}
	{z.x._.x.x._.x.ElementTimesArgs[0] : [1 x 1]}

08/21/2017 08:54:40: Minibatch[1-10]: rmse = 0.07923899 * 10000
08/21/2017 08:54:40: Final Results: Minibatch[1-10]: rmse = 0.07923899 * 10000

08/21/2017 08:54:40: Action "test" complete.

08/21/2017 08:54:40: __COMPLETED__