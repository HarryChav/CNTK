CPU info:
    CPU Model Name: Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz
    Hardware threads: 12
    Total Memory: 264106564 kB
-------------------------------------------------------------------
=== Running /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/04_OneConvBN/../../../../../../Examples/Image/GettingStarted/04_OneConvBN.cntk currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST RunDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/04_OneConvBN/../../../../../../Examples/Image/GettingStarted OutputDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu DeviceId=0 timestamping=true forceDeterministicAlgorithms=true stderr=- trainNetwork=[SGD=[maxEpochs=3]]
CNTK 2.1+ (HEAD 572609, Aug 21 2017 08:22:49) on ad5c3ab446a4 at 2017/08/21 08:54:06

/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/build/gpu/release/bin/cntk  configFile=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/04_OneConvBN/../../../../../../Examples/Image/GettingStarted/04_OneConvBN.cntk  currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST  RunDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu  DataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST  ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/04_OneConvBN/../../../../../../Examples/Image/GettingStarted  OutputDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu  DeviceId=0  timestamping=true  forceDeterministicAlgorithms=true  stderr=-  trainNetwork=[SGD=[maxEpochs=3]]
Changed current directory to /home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST
08/21/2017 08:54:06: Redirecting stderr to file -_trainNetwork_testNetwork.log
08/21/2017 08:54:06: -------------------------------------------------------------------
08/21/2017 08:54:06: Build info: 

08/21/2017 08:54:06: 		Built time: Aug 21 2017 08:20:29
08/21/2017 08:54:06: 		Last modified date: Thu Aug  3 09:47:36 2017
08/21/2017 08:54:06: 		Build type: release
08/21/2017 08:54:06: 		Build target: GPU
08/21/2017 08:54:06: 		With 1bit-SGD: no
08/21/2017 08:54:06: 		With ASGD: yes
08/21/2017 08:54:06: 		Math lib: mkl
08/21/2017 08:54:06: 		CUDA_PATH: /usr/local/cuda-8.0
08/21/2017 08:54:06: 		CUB_PATH: /usr/local/cub-1.4.1
08/21/2017 08:54:06: 		CUDNN_PATH: /usr/local/cudnn-6.0
08/21/2017 08:54:06: 		Build Branch: HEAD
08/21/2017 08:54:06: 		Build SHA1: 57260963c605c12d3796e37783433518ab8ba039
08/21/2017 08:54:06: 		Built by Source/CNTK/buildinfo.h$$0 on 516c40771854
08/21/2017 08:54:06: 		Build Path: /home/philly/jenkins/workspace/CNTK-Build-Linux
08/21/2017 08:54:06: 		MPI distribution: Open MPI
08/21/2017 08:54:06: 		MPI version: 1.10.7
08/21/2017 08:54:06: -------------------------------------------------------------------
08/21/2017 08:54:06: -------------------------------------------------------------------
08/21/2017 08:54:06: GPU info:

08/21/2017 08:54:06: 		Device[0]: cores = 2880; computeCapability = 3.5; type = "GeForce GTX 780 Ti"; total memory = 3020 MB; free memory = 3018 MB
08/21/2017 08:54:06: -------------------------------------------------------------------

Configuration After Processing and Variable Resolution:

configparameters: 04_OneConvBN.cntk:command=trainNetwork:testNetwork
configparameters: 04_OneConvBN.cntk:ConfigDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Tests/EndToEndTests/Examples/Image/GettingStarted/04_OneConvBN/../../../../../../Examples/Image/GettingStarted
configparameters: 04_OneConvBN.cntk:currentDirectory=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST
configparameters: 04_OneConvBN.cntk:dataDir=/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST
configparameters: 04_OneConvBN.cntk:deviceId=0
configparameters: 04_OneConvBN.cntk:forceDeterministicAlgorithms=true
configparameters: 04_OneConvBN.cntk:modelPath=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu/Models/04_OneConvBN
configparameters: 04_OneConvBN.cntk:outputDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu
configparameters: 04_OneConvBN.cntk:precision=float
configparameters: 04_OneConvBN.cntk:rootDir=..
configparameters: 04_OneConvBN.cntk:RunDir=/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu
configparameters: 04_OneConvBN.cntk:stderr=-
configparameters: 04_OneConvBN.cntk:testNetwork={
    action = "test"
minibatchSize = 1024    
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST/Test-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }
}

configparameters: 04_OneConvBN.cntk:timestamping=true
configparameters: 04_OneConvBN.cntk:traceLevel=1
configparameters: 04_OneConvBN.cntk:trainNetwork={
    action = "train"
    BrainScriptNetworkBuilder = {
imageShape = 28:28:1                        
labelDim = 10                               
        featScale = 1/256
        Scale{f} = x => Constant(f) .* x
        ConvBnReluPoolLayer {outChannels, filterShape} = Sequential (
            ConvolutionalLayer      {outChannels, filterShape, pad=true, bias=false} :
            BatchNormalizationLayer {spatialRank = 2} :
            ReLU :
            MaxPoolingLayer         {(2:2), stride = (2:2)} 
        )
        DenseBnReluLayer {outDim} = Sequential (
            LinearLayer             {outDim} :   
            BatchNormalizationLayer {spatialRank = 0} : ReLU
        )
        model = Sequential (
            Scale {featScale} : 
            ConvBnReluPoolLayer {16, (5:5)} : 
            DenseBnReluLayer {64} : 
            LinearLayer {labelDim}
        )
        features = Input {imageShape}
        labels = Input {labelDim}
        ol = model (features)
        ce   = CrossEntropyWithSoftmax (labels, ol)
        errs = ClassificationError (labels, ol)
        featureNodes    = (features)
        labelNodes      = (labels)
        criterionNodes  = (ce)
        evaluationNodes = (errs)
        outputNodes     = (ol)
    }
    SGD = {
        epochSize = 60000
        minibatchSize = 64
        maxEpochs = 10
        learningRatesPerSample = 0.01*5:0.001
        momentumAsTimeConstant = 0
        numMBsToShowResult = 500
    }
    reader = {
        readerType = "CNTKTextFormatReader"
        file = "/home/philly/jenkins/workspace/CNTK-Test-Linux-W1/Examples/Image/DataSets/MNIST/Train-28x28_cntk_text.txt"
        input = {
            features = { dim = 784 ; format = "dense" }
            labels =   { dim = 10  ; format = "dense" }
        }
    }   
} [SGD=[maxEpochs=3]]

08/21/2017 08:54:06: Commands: trainNetwork testNetwork
08/21/2017 08:54:06: precision = "float"
08/21/2017 08:54:06: WARNING: forceDeterministicAlgorithms flag is specified. Using 1 CPU thread for processing.

08/21/2017 08:54:06: ##############################################################################
08/21/2017 08:54:06: #                                                                            #
08/21/2017 08:54:06: # trainNetwork command (train action)                                        #
08/21/2017 08:54:06: #                                                                            #
08/21/2017 08:54:06: ##############################################################################

08/21/2017 08:54:06: 
Creating virgin network.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[10 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[64 x 0] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[5 x 5 x 0 x 16] as glorotUniform later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.
Node '<placeholder>' (LearnableParameter operation): Initializating Parameter[0 x 1] as fromValue later when dimensions are fully known.

Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 31 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *]
Validating --> model.arrayOfFunctions[3].W = LearnableParameter() :  -> [10 x 0]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 0]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [5 x 5 x 0 x 16]
Validating --> ol.x.x.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *]
Validating --> _ol.x.x.x = ElementTimes (ol.x.x.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *] -> [28 x 28 x 1 x *]
Node 'model.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [5 x 5 x 1 x 16].
Node 'model.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[5 x 5 x 1 x 16] <- glorotUniform(seed=3, init dims=[400 x 25], range=0.118818(0.118818*1.000000), onCPU=true.
)Validating --> ol.x.x.x._.x.c = Convolution (model.arrayOfFunctions[1].arrayOfFunctions[0].W, _ol.x.x.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *] -> [28 x 28 x 16 x *]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 1.000000.
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [16 x 1].
Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[16 x 1] <- 0.000000.
Validating --> ol.x.x.x._ = BatchNormalization (ol.x.x.x._.x.c, model.arrayOfFunctions[1].arrayOfFunctions[1].scale, model.arrayOfFunctions[1].arrayOfFunctions[1].bias, model.arrayOfFunctions[1].arrayOfFunctions[1].runMean, model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [28 x 28 x 16 x *], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [28 x 28 x 16 x *]
Validating --> ol.x.x.x = RectifiedLinear (ol.x.x.x._) : [28 x 28 x 16 x *] -> [28 x 28 x 16 x *]
Validating --> ol.x.x = Pooling (ol.x.x.x) : [28 x 28 x 16 x *] -> [14 x 14 x 16 x *]
Node 'model.arrayOfFunctions[2].arrayOfFunctions[0].W' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 14 x 14 x 16].
Node 'model.arrayOfFunctions[2].arrayOfFunctions[0].W' (LearnableParameter operation): Initializing Parameter[64 x 14 x 14 x 16] <- glorotUniform(seed=2, init dims=[64 x 3136], range=0.043301(0.043301*1.000000), onCPU=true.
)Validating --> ol.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[2].arrayOfFunctions[0].W, ol.x.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *] -> [64 x *]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> ol.x._.x = Plus (ol.x._.x.PlusArgs[0], model.arrayOfFunctions[2].arrayOfFunctions[0].b) : [64 x *], [64] -> [64 x *]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].scale = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].bias = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [0 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].scale' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].scale' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 1.000000.
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].bias' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].bias' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].runMean' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].runMean' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance' (LearnableParameter operation) operation: Tensor shape was inferred as [64 x 1].
Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance' (LearnableParameter operation): Initializing Parameter[64 x 1] <- 0.000000.
Validating --> ol.x._ = BatchNormalization (ol.x._.x, model.arrayOfFunctions[2].arrayOfFunctions[1].scale, model.arrayOfFunctions[2].arrayOfFunctions[1].bias, model.arrayOfFunctions[2].arrayOfFunctions[1].runMean, model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[2].arrayOfFunctions[1].runCount) : [64 x *], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [64 x *]
Validating --> ol.x = RectifiedLinear (ol.x._) : [64 x *] -> [64 x *]
Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation) operation: Tensor shape was inferred as [10 x 64].
Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation): Initializing Parameter[10 x 64] <- glorotUniform(seed=1, init dims=[10 x 64], range=0.284747(0.284747*1.000000), onCPU=true.
)Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[3].W, ol.x) : [10 x 64], [64 x *] -> [10 x *]
Validating --> model.arrayOfFunctions[3].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[3].b) : [10 x *], [10] -> [10 x *]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *], [10 x *] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *], [10 x *] -> [1]

Validating network. 13 nodes to process in pass 2.


Validating network, final pass.

ol.x.x.x._.x.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using cuDNN batch normalization engine.
ol.x.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using cuDNN batch normalization engine.



Post-processing network complete.

08/21/2017 08:54:07: 
Model has 31 nodes. Using GPU 0.

08/21/2017 08:54:07: Training criterion:   ce = CrossEntropyWithSoftmax
08/21/2017 08:54:07: Evaluation criterion: errs = ClassificationError


Allocating matrices for forward and/or backward propagation.

Gradient Memory Aliasing: 4 are aliased.
	ol.PlusArgs[0] (gradient) reuses ol (gradient)
	ol.x._.x.PlusArgs[0] (gradient) reuses ol.x._.x (gradient)

Memory Sharing: Out of 51 matrices, 23 are shared as 6, and 28 are not shared.

Here are the ones that share memory:
	{ ol.x._.x : [64 x *]
	  ol.x.x.x : [28 x 28 x 16 x *] (gradient)
	  ol.x.x.x._ : [28 x 28 x 16 x *]
	  ol.x.x.x._.x.c : [28 x 28 x 16 x *] (gradient) }
	{ model.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1] (gradient)
	  ol.x.x.x : [28 x 28 x 16 x *] }
	{ model.arrayOfFunctions[1].arrayOfFunctions[0].W : [5 x 5 x 1 x 16] (gradient)
	  ol.x.x : [14 x 14 x 16 x *]
	  ol.x.x.x._ : [28 x 28 x 16 x *] (gradient) }
	{ ol : [10 x *]
	  ol.x : [64 x *] (gradient)
	  ol.x._ : [64 x *]
	  ol.x._.x : [64 x *] (gradient)
	  ol.x._.x.PlusArgs[0] : [64 x *] (gradient) }
	{ model.arrayOfFunctions[2].arrayOfFunctions[0].W : [64 x 14 x 14 x 16] (gradient)
	  ol : [10 x *] (gradient)
	  ol.PlusArgs[0] : [10 x *]
	  ol.PlusArgs[0] : [10 x *] (gradient)
	  ol.x._ : [64 x *] (gradient) }
	{ model.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1] (gradient)
	  ol.x : [64 x *]
	  ol.x._.x.PlusArgs[0] : [64 x *]
	  ol.x.x : [14 x 14 x 16 x *] (gradient) }

Here are the ones that don't share memory:
	{labels : [10 x *]}
	{model.arrayOfFunctions[3].W : [10 x 64]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].bias : [64 x 1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].runCount : [1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[0].W : [64 x 14 x 14 x 16]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].scale : [64 x 1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].runMean : [64 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{model.arrayOfFunctions[3].b : [10]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[0].b : [64]}
	{features : [28 x 28 x 1 x *]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance : [64 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{ol.x.x.x.ElementTimesArgs[0] : [1 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[0].W : [5 x 5 x 1 x 16]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{errs : [1]}
	{ce : [1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[0].b : [64] (gradient)}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].bias : [64 x 1] (gradient)}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].scale : [64 x 1] (gradient)}
	{ce : [1] (gradient)}
	{_ol.x.x.x : [28 x 28 x 1 x *]}
	{ol.x.x.x._.x.c : [28 x 28 x 16 x *]}
	{model.arrayOfFunctions[3].W : [10 x 64] (gradient)}
	{model.arrayOfFunctions[3].b : [10] (gradient)}


08/21/2017 08:54:07: Training 201978 parameters in 9 out of 9 parameter tensors and 20 nodes with gradient:

08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[1].arrayOfFunctions[0].W' (LearnableParameter operation) : [5 x 5 x 1 x 16]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].bias' (LearnableParameter operation) : [16 x 1]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[1].arrayOfFunctions[1].scale' (LearnableParameter operation) : [16 x 1]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[2].arrayOfFunctions[0].W' (LearnableParameter operation) : [64 x 14 x 14 x 16]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[2].arrayOfFunctions[0].b' (LearnableParameter operation) : [64]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].bias' (LearnableParameter operation) : [64 x 1]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[2].arrayOfFunctions[1].scale' (LearnableParameter operation) : [64 x 1]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[3].W' (LearnableParameter operation) : [10 x 64]
08/21/2017 08:54:07: 	Node 'model.arrayOfFunctions[3].b' (LearnableParameter operation) : [10]

08/21/2017 08:54:07: No PreCompute nodes found, or all already computed. Skipping pre-computation step.

08/21/2017 08:54:07: Starting Epoch 1: learning rate per sample = 0.01  effective momentum = 0.000000  momentum as time constant = 0.0 samples

08/21/2017 08:54:07: Starting minibatch loop.
08/21/2017 08:54:11:  Epoch[ 1 of 3]-Minibatch[   1- 500, 53.33%]: ce = 0.14946208 * 32000; errs = 4.612% * 32000; time = 3.5023s; samplesPerSecond = 9136.8
08/21/2017 08:54:12: Finished Epoch[ 1 of 3]: [Training] ce = 0.11064993 * 60000; errs = 3.403% * 60000; totalSamplesSeen = 60000; learningRatePerSample = 0.0099999998; epochTime=4.66187s
08/21/2017 08:54:12: SGD: Saving checkpoint model '/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu/Models/04_OneConvBN.1'

08/21/2017 08:54:12: Starting Epoch 2: learning rate per sample = 0.01  effective momentum = 0.000000  momentum as time constant = 0.0 samples

08/21/2017 08:54:12: Starting minibatch loop.
08/21/2017 08:54:13:  Epoch[ 2 of 3]-Minibatch[   1- 500, 53.33%]: ce = 0.04191610 * 32000; errs = 1.303% * 32000; time = 1.3194s; samplesPerSecond = 24253.6
08/21/2017 08:54:15: Finished Epoch[ 2 of 3]: [Training] ce = 0.04388982 * 60000; errs = 1.407% * 60000; totalSamplesSeen = 120000; learningRatePerSample = 0.0099999998; epochTime=2.484s
08/21/2017 08:54:15: SGD: Saving checkpoint model '/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu/Models/04_OneConvBN.2'

08/21/2017 08:54:15: Starting Epoch 3: learning rate per sample = 0.01  effective momentum = 0.000000  momentum as time constant = 0.0 samples

08/21/2017 08:54:15: Starting minibatch loop.
08/21/2017 08:54:16:  Epoch[ 3 of 3]-Minibatch[   1- 500, 53.33%]: ce = 0.02700434 * 32000; errs = 0.881% * 32000; time = 1.3203s; samplesPerSecond = 24237.2
08/21/2017 08:54:17: Finished Epoch[ 3 of 3]: [Training] ce = 0.02928812 * 60000; errs = 0.955% * 60000; totalSamplesSeen = 180000; learningRatePerSample = 0.0099999998; epochTime=2.48929s
08/21/2017 08:54:17: SGD: Saving checkpoint model '/tmp/cntk-test-20170821083849.769346/Examples/Image/GettingStarted_04_OneConvBN@release_gpu/Models/04_OneConvBN'

08/21/2017 08:54:17: Action "train" complete.


08/21/2017 08:54:17: ##############################################################################
08/21/2017 08:54:17: #                                                                            #
08/21/2017 08:54:17: # testNetwork command (test action)                                          #
08/21/2017 08:54:17: #                                                                            #
08/21/2017 08:54:17: ##############################################################################


Post-processing network...

3 roots:
	ce = CrossEntropyWithSoftmax()
	errs = ClassificationError()
	ol = Plus()

Validating network. 31 nodes to process in pass 1.

Validating --> labels = InputValue() :  -> [10 x *1]
Validating --> model.arrayOfFunctions[3].W = LearnableParameter() :  -> [10 x 64]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[0].W = LearnableParameter() :  -> [64 x 14 x 14 x 16]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[0].W = LearnableParameter() :  -> [5 x 5 x 1 x 16]
Validating --> ol.x.x.x.ElementTimesArgs[0] = LearnableParameter() :  -> [1 x 1]
Validating --> features = InputValue() :  -> [28 x 28 x 1 x *1]
Validating --> _ol.x.x.x = ElementTimes (ol.x.x.x.ElementTimesArgs[0], features) : [1 x 1], [28 x 28 x 1 x *1] -> [28 x 28 x 1 x *1]
Validating --> ol.x.x.x._.x.c = Convolution (model.arrayOfFunctions[1].arrayOfFunctions[0].W, _ol.x.x.x) : [5 x 5 x 1 x 16], [28 x 28 x 1 x *1] -> [28 x 28 x 16 x *1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].scale = LearnableParameter() :  -> [16 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].bias = LearnableParameter() :  -> [16 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [16 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [16 x 1]
Validating --> model.arrayOfFunctions[1].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> ol.x.x.x._ = BatchNormalization (ol.x.x.x._.x.c, model.arrayOfFunctions[1].arrayOfFunctions[1].scale, model.arrayOfFunctions[1].arrayOfFunctions[1].bias, model.arrayOfFunctions[1].arrayOfFunctions[1].runMean, model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[1].arrayOfFunctions[1].runCount) : [28 x 28 x 16 x *1], [16 x 1], [16 x 1], [16 x 1], [16 x 1], [1] -> [28 x 28 x 16 x *1]
Validating --> ol.x.x.x = RectifiedLinear (ol.x.x.x._) : [28 x 28 x 16 x *1] -> [28 x 28 x 16 x *1]
Validating --> ol.x.x = Pooling (ol.x.x.x) : [28 x 28 x 16 x *1] -> [14 x 14 x 16 x *1]
Validating --> ol.x._.x.PlusArgs[0] = Times (model.arrayOfFunctions[2].arrayOfFunctions[0].W, ol.x.x) : [64 x 14 x 14 x 16], [14 x 14 x 16 x *1] -> [64 x *1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[0].b = LearnableParameter() :  -> [64]
Validating --> ol.x._.x = Plus (ol.x._.x.PlusArgs[0], model.arrayOfFunctions[2].arrayOfFunctions[0].b) : [64 x *1], [64] -> [64 x *1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].scale = LearnableParameter() :  -> [64 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].bias = LearnableParameter() :  -> [64 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].runMean = LearnableParameter() :  -> [64 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance = LearnableParameter() :  -> [64 x 1]
Validating --> model.arrayOfFunctions[2].arrayOfFunctions[1].runCount = LearnableParameter() :  -> [1]
Validating --> ol.x._ = BatchNormalization (ol.x._.x, model.arrayOfFunctions[2].arrayOfFunctions[1].scale, model.arrayOfFunctions[2].arrayOfFunctions[1].bias, model.arrayOfFunctions[2].arrayOfFunctions[1].runMean, model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance, model.arrayOfFunctions[2].arrayOfFunctions[1].runCount) : [64 x *1], [64 x 1], [64 x 1], [64 x 1], [64 x 1], [1] -> [64 x *1]
Validating --> ol.x = RectifiedLinear (ol.x._) : [64 x *1] -> [64 x *1]
Validating --> ol.PlusArgs[0] = Times (model.arrayOfFunctions[3].W, ol.x) : [10 x 64], [64 x *1] -> [10 x *1]
Validating --> model.arrayOfFunctions[3].b = LearnableParameter() :  -> [10]
Validating --> ol = Plus (ol.PlusArgs[0], model.arrayOfFunctions[3].b) : [10 x *1], [10] -> [10 x *1]
Validating --> ce = CrossEntropyWithSoftmax (labels, ol) : [10 x *1], [10 x *1] -> [1]
Validating --> errs = ClassificationError (labels, ol) : [10 x *1], [10 x *1] -> [1]

Validating network. 13 nodes to process in pass 2.


Validating network, final pass.

ol.x.x.x._.x.c: using cuDNN convolution engine for geometry: Input: 28 x 28 x 1, Output: 28 x 28 x 16, Kernel: 5 x 5 x 1, Map: 16, Stride: 1 x 1 x 1, Sharing: (1, 1, 1), AutoPad: (1, 1, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using cuDNN batch normalization engine.
ol.x.x: using cuDNN convolution engine for geometry: Input: 28 x 28 x 16, Output: 14 x 14 x 16, Kernel: 2 x 2 x 1, Map: 1, Stride: 2 x 2 x 1, Sharing: (1, 1, 1), AutoPad: (0, 0, 0), LowerPad: 0 x 0 x 0, UpperPad: 0 x 0 x 0.
Using cuDNN batch normalization engine.



Post-processing network complete.

evalNodeNames are not specified, using all the default evalnodes and training criterion nodes.


Allocating matrices for forward and/or backward propagation.

Memory Sharing: Out of 31 matrices, 11 are shared as 3, and 20 are not shared.

Here are the ones that share memory:
	{ ol.x : [64 x *1]
	  ol.x._.x : [64 x *1]
	  ol.x.x.x : [28 x 28 x 16 x *1]
	  ol.x.x.x._.x.c : [28 x 28 x 16 x *1] }
	{ _ol.x.x.x : [28 x 28 x 1 x *1]
	  ol : [10 x *1]
	  ol.x._ : [64 x *1]
	  ol.x.x : [14 x 14 x 16 x *1]
	  ol.x.x.x._ : [28 x 28 x 16 x *1] }
	{ ol.PlusArgs[0] : [10 x *1]
	  ol.x._.x.PlusArgs[0] : [64 x *1] }

Here are the ones that don't share memory:
	{model.arrayOfFunctions[1].arrayOfFunctions[1].bias : [16 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[0].W : [5 x 5 x 1 x 16]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].runCount : [1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].runMean : [64 x 1]}
	{model.arrayOfFunctions[3].b : [10]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].runVariance : [64 x 1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].scale : [64 x 1]}
	{model.arrayOfFunctions[3].W : [10 x 64]}
	{ol.x.x.x.ElementTimesArgs[0] : [1 x 1]}
	{errs : [1]}
	{features : [28 x 28 x 1 x *1]}
	{ce : [1]}
	{model.arrayOfFunctions[2].arrayOfFunctions[0].b : [64]}
	{model.arrayOfFunctions[2].arrayOfFunctions[0].W : [64 x 14 x 14 x 16]}
	{model.arrayOfFunctions[2].arrayOfFunctions[1].bias : [64 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].runCount : [1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].runMean : [16 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].runVariance : [16 x 1]}
	{model.arrayOfFunctions[1].arrayOfFunctions[1].scale : [16 x 1]}
	{labels : [10 x *1]}

08/21/2017 08:54:18: Minibatch[1-10]: errs = 1.280% * 10000; ce = 0.04016219 * 10000
08/21/2017 08:54:18: Final Results: Minibatch[1-10]: errs = 1.280% * 10000; ce = 0.04016219 * 10000; perplexity = 1.04097960

08/21/2017 08:54:18: Action "test" complete.

08/21/2017 08:54:18: __COMPLETED__